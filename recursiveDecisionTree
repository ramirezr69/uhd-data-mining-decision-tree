import math
import sys
import os
from collections import Counter

print("Programming Assignment 2")
'''
Things to Do
Recursively Calling the Formula
Visualizing Decision Tree

ID3 algorithm
1. Split the best attribute
2. Decision attribute for this node <-A
3. For each value of A, create a new child node
4. Split training{Examples to child nodes}
5. For each child node /subset
    if subset is pure: STOP
    else: Split (child_node, {subset})

Extra Things to do
Change Node Shape
Format Counters
'''
# List of Tuples with each element consisting of a dictionary and a boolean value
#[({},bool])]


inputs = [
    ({'level': 'Senior', 'lang': 'Java', 'tweets': 'no', 'phd': 'no'}, False),
    ({'level': 'Senior', 'lang': 'Java', 'tweets': 'no', 'phd': 'yes'}, False),
    ({'level': 'Mid', 'lang': 'Python', 'tweets': 'no', 'phd': 'no'}, True),
    ({'level': 'Junior', 'lang': 'Python', 'tweets': 'no', 'phd': 'no'}, True),
    ({'level': 'Junior', 'lang': 'R', 'tweets': 'yes', 'phd': 'no'}, True),
    ({'level': 'Junior', 'lang': 'R', 'tweets': 'yes', 'phd': 'yes'}, False),
    ({'level': 'Mid', 'lang': 'R', 'tweets': 'yes', 'phd': 'yes'}, True),
    ({'level': 'Senior', 'lang': 'Python', 'tweets': 'no', 'phd': 'no'}, False),
    ({'level': 'Senior', 'lang': 'R', 'tweets': 'yes', 'phd': 'no'}, True),
    ({'level': 'Junior', 'lang': 'Python', 'tweets': 'yes', 'phd': 'no'}, True),
    ({'level': 'Senior', 'lang': 'Python', 'tweets': 'yes', 'phd': 'yes'}, True),
    ({'level': 'Mid', 'lang': 'Python', 'tweets': 'no', 'phd': 'yes'}, True),
    ({'level': 'Mid', 'lang': 'Java', 'tweets': 'yes', 'phd': 'no'}, True),
    ({'level': 'Junior', 'lang': 'Python', 'tweets': 'no', 'phd': 'yes'}, False)
]

#Test for root node LANG:
inputs2 = [
    ({'level': 'Senior', 'lang': 'Java', 'tweets': 'no', 'phd': 'no',}, False),
    ({'level': 'Senior', 'lang': 'Java', 'tweets': 'no', 'phd': 'yes'}, False),
    ({'level': 'Mid', 'lang': 'Python', 'tweets': 'no', 'phd': 'no'}, True),
    ({'level': 'Junior', 'lang': 'Python', 'tweets': 'no', 'phd': 'no'}, True),
    ({'level': 'Junior', 'lang': 'R', 'tweets': 'yes', 'phd': 'no'}, True),
    ({'level': 'Junior', 'lang': 'R', 'tweets': 'yes', 'phd': 'yes'}, False),
    ({'level': 'Mid', 'lang': 'R', 'tweets': 'yes', 'phd': 'yes'}, True),
    ({'level': 'Senior', 'lang': 'Python', 'tweets': 'no', 'phd': 'no'}, False),
    ({'level': 'Senior', 'lang': 'R', 'tweets': 'yes', 'phd': 'no'}, True),
    ({'level': 'Junior', 'lang': 'Python', 'tweets': 'yes', 'phd': 'no'}, True),
    ({'level': 'Senior', 'lang': 'Python', 'tweets': 'yes', 'phd': 'yes'}, True),
    ({'level': 'Mid', 'lang': 'Python', 'tweets': 'no', 'phd': 'yes'}, False),
    ({'level': 'Mid', 'lang': 'Java', 'tweets': 'yes', 'phd': 'no'}, False),
    ({'level': 'Junior', 'lang': 'Python', 'tweets': 'no', 'phd': 'yes'}, False)

]

#Sample Tests
inputs3 = [
    ({'level': 'Senior', 'lang': 'Java', 'tweets': 'no', 'phd': 'no', 'swag': 'no'}, False),
    ({'level': 'Mid', 'lang': 'R', 'tweets': 'yes', 'phd': 'no', 'swag': 'no'}, False),
    ({'level': 'Junior', 'lang': 'R', 'tweets': 'yes', 'phd': 'no', 'swag': 'yes'}, True),
    ({'level': 'Mid', 'lang': 'Python', 'tweets': 'no', 'phd': 'no', 'swag': 'no'}, False),
]
decisionTree = []

#Class Node to hold all Attributes
class Node:
    value = ""

    def __init__(self,val):
        self.setValue(val)
        self.children = []
        self.attributes = []

    def __str__(self):
        return str(self.value)

    def setValue(self, val):
        self.value = val

    def children(self):
        return self._children

    def attributes(self):
        return self._attributes

    def addChild(self,child):
        self.children.append(child)


    def addAttributes(self, val):
        if not any(val in s for s in self.attributes):
            self.attributes.append(val)
            self.attributes.sort()

class Parent:
    value = ""

    def __init__(self, val):
        self.setValue(val)
        self.children = []

    def __str__(self):
        return str(self.value)

    def setValue(self, val):
        self.value = val

    def children(self):
        return self._children

    def addChild(self, child):
        self.children.append(child)

def entropy(children, data, targetAttr):
    #children
    #target attribute
    #data
    print('Target Attribute:',targetAttr)
    print(children)
    dataEntropy = 0.0
    trueCounter = 0
    falseCounter = 0
    count = 0
    print('Number of Attributes:' ,len(children))
    print('Length of Data', len(data))
    while (count < len(children)): #Each child in the node
        print(count, children[count]) #
        for element in data:  # Access each dictionary
            for first in element[:-1]:  # Skips the boolean part of the element Acess each key
                if element[1] == True and first[targetAttr] == children[count]:
                    trueCounter += 1
                elif element[1] == False and first[targetAttr] == children[count]:
                    falseCounter += 1
        class0 = float(trueCounter)
        print("Class 0", trueCounter)
        trueCounter = 0
        class1 = float(falseCounter)
        print("Class 1", falseCounter)
        falseCounter = 0
        total = class0 + class1
        grandTotal = float(total / len(data))
        x = float(class0 / total)
        y = float(class1 / total)
        if x == 0 or y == 0:
            subEntrophy = 0
        else:
            print('(BEFORE) Subentrophy for', ((-x) * math.log(x, 2) - y * math.log(y, 2)))
            subEntrophy = ((-x) * math.log(x, 2) - y * math.log(y, 2)) * grandTotal
        print('Subentrophy for',children[count])
        print(subEntrophy)
        dataEntropy += subEntrophy
        count = count + 1
    print('Total Entrophy:' , dataEntropy)
    return dataEntropy

#Split variables from the data
def splitVariables(data):
    #Get dictionary part of data
    dictionary = []
    for element in data:
        dictionary.append(element[0])

    #Store all the keys in an array
    attr = []
    for key in dictionary[0].keys():
        attr.append(key)

    #Store all keys in a list holding attributes
    counter = 0

    for x in attr:
        sample = Node(attr[counter])
        decisionTree.append(sample)
        counter += 1
    #return decisionTree


    #Add each value to each node
    for x in decisionTree:
        key = str(x)
        print("Hello", key)  # Access all attributes
        for element in data:  # Access each dictionary
            for first in element[:-1]:  # Skips the boolean part of the element Acess each key
                #print(key, first[key])  # Print all values of matching key
                x.addChild(first[key])  # Add each Key to all Variables
                x.addAttributes(first[key])  # Add each unique Key to node
                # print('END - Value')
        print('END - Key')

#Determine the best split
def find_best_split(attributes, data):
    entropylist = []
    for x in attributes:
        key = str(x)
        print("Hello", key) #Access all attributes
        numberOfChildren = len(x.attributes)
        print(numberOfChildren)
        minEntropy = entropy(x.attributes, new_input, key)
        entropylist.append(minEntropy)
        print('END - Key')
    print(entropylist)
    print(min(entropylist))
    bestSplitAttribute = entropylist.index(min(entropylist))
    print(bestSplitAttribute)
    return bestSplitAttribute

#Attribute counter
def attributeCounter(parent,target, data): #(Parent, Child Attribute to test, input data)
    trueCounter = 0
    falseCounter = 0
    for element in data:  # Access each dictionary
        for first in element[:-1]:  # Skips the boolean part of the element Acess each key
            if element[1] == True and first[parent] == target:
                trueCounter += 1
            elif element[1] == False and first[parent] == target:
                falseCounter += 1

    list = [trueCounter,falseCounter]
    return list

#Eliminate attribute
#def attributeDelete(attributeToDelete):

def create_children_from(key,data):
    #Returns a list of children
    temp_List = []
    for element in data:  # Access each dictionary
        for first in element[:-1]:  # Skips the boolean part of the element Acess each key
            val = first[str(key)]
            if not any(val in s for s in temp_List):
                temp_List.append(val)  # Print all values of matching key

    return temp_List

#Split each child node training set to each individual node
def split_training_set(parent,target, data): #(Parent, Child Attribute to test, input data)
    split_training_data = []
    for element in data:  # Access each dictionary
        for first in element[:-1]:  # Skips the boolean part of the element Acess each key
            if element[1] == True and first[parent] == target:
                split_training_data.append(element)
            elif element[1] == False and first[parent] == target:
                split_training_data.append(element)
    return split_training_data

def child_entrophy(parent, child , data):
    print('Hello from child_entrophy')
    print('We are calculating entrophy and returning to see which one is the lowest one')
    print(parent,child)
    test = attributeCounter(parent, child, data)
    print('Attribute Counter -- ',test[0], test[1])



def split_child(child, data,attributesToSplit):
    print('Hello from child split')
    print(child)
    print('Data Length',len(data))
    for x in data:
        print(x)
    for x in attributesToSplit:
        print x
        temp = str(x)
        childList = create_children_from(temp,data)
        print(childList)
        for y in childList:
            child_entrophy(temp, y, data)



#recursiveSplit
def split(parent, data, attributesToSplit):
    #Attribute To Start on is
    print("A<-RootNode is :", str(parent))

    #Create a new child node for each value of A
    child_List = create_children_from(parent,data)
    childNodeList = []
    z = 0
    for x in child_List:
        node = Parent(child_List[z])  # Create a new child node for each value of A
        childNodeList.append(node)
        z += 1
    y = 0
    for x in childNodeList:
        # Determine if we should split a child or not
        print(x)
        tempList = split_training_set(str(parent), str(x), data)
        for line in tempList:
            print(line)
            x.addChild(line)

        #Determine Split
        test = attributeCounter(str(parent), child_List[y], data)
        if test[0] == 0 or test[1] == 0:
            print(test[0], test[1])
            print('No Need to Split - SET IS PURE')
        else:
            print(test[0], test[1])
            print('Impure - Split!')
            for element in attributesToSplit:
                print(str(x), '->', str(element))
            split_child(x, tempList, attributesToSplit)
        y += 1





    '''
    y = 0
    for x in child_List:
        # Determine if we should split a child or not
        test = attributeCounter(str(parent),child_List[y], new_input)
        print(x)
        if test[0] == 0 or test[1] == 0:
            print(test[0], test[1])
            print('No Need to Split')
        else:
            print(test[0], test[1])
            print('Split!')
        y += 1
    '''



#Convert a tuple to a list
new_input = list(inputs)

#Print length of data set
print(len(new_input))

#Get Attributes
dictionary = []
for element in new_input:
     dictionary.append(element[0])
     break

for x in dictionary:
    print(x)

#List of Functions to Make
#DETERMINE ATTRIBUTES FUNCTION
#DETERMINE BEST VARIABLE TO SPLIT ON(RECURSIVE)

#Count the attributes
attr = []
for key in dictionary[0].keys():
    attr.append(key)

attributeCount =  len(dictionary[0].keys())
print("Attribute Count = ", attributeCount)
print("Attribute Count = ",len(attr))

#Deleting attributes
#attr.sort()
#del attr[0]

print(attr)

#tree = splitVariables(new_input)
attributeLeftTree =[]
print('Attributes:')
for x in decisionTree:
    print(x)
    attributeLeftTree.append(str(x))

#main
splitVariables(new_input)
splitIndex = find_best_split(decisionTree, new_input)

#splitIndex = 0 #Testing
rootNode = str(decisionTree[splitIndex])
print('Root Node:', rootNode)
bestSplitStr = str(decisionTree[splitIndex])
print('The best attribute to split is', bestSplitStr)
print("Subset: ", decisionTree[splitIndex].children)
print("Children: ",decisionTree[splitIndex].attributes)

print('Attributes Left')

#Delete the current attribute
attributeLeftTree = decisionTree[:]
counter = 0
for x in attributeLeftTree:
    print(x)
    if str(x) == bestSplitStr:
        del attributeLeftTree[counter]
    counter += 1
print('\n')

#Stopping condition - Check if each child is pure

for x in attributeLeftTree:
    print(x)

#How to access all values
A = 'A'
B = 'B'
characterIndex = 67
#Printing the Tree
from graphviz import Digraph
dot = Digraph(comment='The Decision Tree')
#Print the Title Node and the Best Split
dot.node('A', 'Hired?') #65
dot.node('B', bestSplitStr) #66

#Print the children
dot.edges([A + B])

counter = 0
while counter < len(decisionTree[splitIndex].attributes):
    dot.node(chr(characterIndex), decisionTree[splitIndex].attributes[counter])
    temp = chr(characterIndex)
    dot.edges([B + temp])
    characterIndex += 1
    counter += 1




#dot.edge('B', 'L', constraint='false')


from graphviz import Source

src = Source('digraph "the holy hand grenade" { rankdir=LR; 1 -> 2 -> 3 -> lob }')

print(dot.source)
print(ord('A'))
dot.render('test-output/decision-tree.gv', view=True)


#test = attributeCounter('level','Mid',new_input)
#print(test[0],test[1])

split(decisionTree[splitIndex],new_input, attributeLeftTree)